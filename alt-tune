#!/usr/bin/env bash

AT_TMP_PATH=$(mktemp -d)
cleanup() {
    # echo "Removing the temporary directory: $AT_TMP_PATH"
    rm -rf "$AT_TMP_PATH"
}
trap "cleanup" EXIT

#fix for wayland
export NO_AT_BRIDGE=1
export GDK_BACKEND="x11"

# change GTK theme
# export GTK_THEME="Adwaita:dark"

# USE_EPMP=1 включает дополнительные вкладки для установки приложений с помощью epm play, если установлен eepm
USE_EPMP=1

AT_SCRIPTS_PATH="$(dirname $(readlink -f "$0"))"
AT_PLUGINS_PATH="${AT_SCRIPTS_PATH}/alt-tune-plugins"
AT_ICON="${AT_SCRIPTS_PATH}/alt-tune.png"
AT_YAD=yad
AT_RANDOM="${RANDOM}"
AT_LINE_SEPARATOR="------------------------------------------------------------------------"
AT_SORT_TAB=('FOR_GAMES' 'KDE')

print_warn () { printf "\E[33m%s $* %s\e[0m\n" ;}
print_in_use () { printf "\E[36m%s $* %s\e[0m\n"  ;}
print_not_used () { printf "\E[35m%s $* %s\e[0m\n" ;}

check_epm_play_app () {
    echo "Check available epm play applications..."
    epmp </dev/null 1> "${AT_TMP_PATH}/available_app"
    echo -e "Done.\nCheck installed epm play applications..."
    epmp --list --short </dev/null 1> "${AT_TMP_PATH}/installed_app"
    echo "Done."

    while read BOOL_IN_LIST ; do
    if [[ ! $(echo "$BOOL_IN_LIST" | grep "Available applications") ]] ; then
        if [[ $(grep $(echo "$BOOL_IN_LIST" | awk -F' - ' '{print $1}') "${AT_TMP_PATH}/installed_app") ]]
        then SET_BOOLEAN="TRUE"
        else SET_BOOLEAN="FALSE"
        fi
        echo -en "$SET_BOOLEAN|$(echo "$BOOL_IN_LIST" | awk -F' - ' '{print $1}')|$(echo "$BOOL_IN_LIST" | awk -F' - ' '{print $2 $3 $4}')|" >> "${AT_TMP_PATH}/available_app_tmp"
    fi
    done < "${AT_TMP_PATH}/available_app"

    touch "${AT_TMP_PATH}/installed_app_tmp"
    while read BOOL_IN_LIST ; do
        echo -en "FALSE|$BOOL_IN_LIST|" >> "${AT_TMP_PATH}/installed_app_tmp"
    done < "${AT_TMP_PATH}/installed_app"
}

check_plugins () {
    PLUGINS_TO_GUI=""
    touch "${AT_TMP_PATH}/skip_plugins" "${AT_TMP_PATH}/list_plugins"
    for GREP_PLUGINS_PATH in $(ls "${AT_PLUGINS_PATH}") ; do
        [[ ! -d "${AT_PLUGINS_PATH}/${GREP_PLUGINS_PATH}" ]] && continue
        [[ -z "$(ls "${AT_PLUGINS_PATH}/${GREP_PLUGINS_PATH}/")" ]] && continue
        for GREP_PLUGINS in "${AT_PLUGINS_PATH}/${GREP_PLUGINS_PATH}/"* ; do
            . "${GREP_PLUGINS}"
            if at_plugin_check ; then
                BOOL_IN_PLUGINS=TRUE
                echo "${GREP_PLUGINS}" >> "${AT_TMP_PATH}/skip_plugins"
                echo -e "$(basename ${GREP_PLUGINS}) $(print_in_use '[ In use ]')\n${AT_PLUGIN_INFO}\n${AT_LINE_SEPARATOR}" 1>> "${AT_TMP_PATH}/list_plugins"
            else
                BOOL_IN_PLUGINS=FALSE
                echo -e "$(basename ${GREP_PLUGINS}) $(print_not_used '[ Not used ]')\n${AT_PLUGIN_INFO}\n${AT_LINE_SEPARATOR}" 1>> "${AT_TMP_PATH}/list_plugins"
            fi
            eval PLUGINS_${GREP_PLUGINS_PATH}_TO_GUI+="\"$BOOL_IN_PLUGINS| $AT_PLUGIN_NAME |$AT_PLUGIN_INFO |"\"
        done
    done
}

use_from_gui () {
    [[ -z "$(which yad)" ]] && echo 'You need to intsall "yad" in your system.' && exit 1
    old_IFS=$IFS && IFS=$'|'
    local tab_count=0
    for ptab in "${AT_SORT_TAB[@]}" ; do
        local AT_TAB[$tab_count]="--tab=   $(echo $ptab | sed 's/_/ /')   !$AT_ICON"
        ((tab_count++))
        PLUGINS_FOR_TO_GUI=PLUGINS_${ptab}_TO_GUI
        "${AT_YAD}" --plug="$AT_RANDOM" --tabnum=$tab_count --list --checklist --search-column=3\
                    --separator='|' --column "Set" --column "Settings" --column  "Info" \
                    ${!PLUGINS_FOR_TO_GUI} 1>> "${AT_TMP_PATH}/plugins" 2>/dev/null &
    done

    if [[ "$USE_EPMP" == 1 ]] ; then
        AT_TAB[$tab_count]="--tab=   EPMP INSTALL   !x-package-repository"
        ((tab_count++))
        "${AT_YAD}" --plug="$AT_RANDOM" --tabnum=$tab_count --list --checklist --search-column=3\
                --separator='|' --column "Set" --column "Applications:" --column  "Info" \
                `cat "${AT_TMP_PATH}/available_app_tmp"` > "${AT_TMP_PATH}/choosed_app" 2>/dev/null &

        AT_TAB[$tab_count]="--tab=   EPMP REMOVE   !x-package-repository"
        ((tab_count++))
        "${AT_YAD}" --plug="$AT_RANDOM" --tabnum=$tab_count --list --checklist --search-column=2\
                --separator='|' --column "Set" --column "Applications:" \
                `cat "${AT_TMP_PATH}/installed_app_tmp"` > "${AT_TMP_PATH}/removed_app" 2>/dev/null &
    fi

    "${AT_YAD}" --key=$AT_RANDOM --notebook --borders=3 --width=1400 --height=800 \
                --title "Alt Tune" --window-icon="${AT_ICON}" --tab-pos=bottom ${AT_TAB[@]} 2>/dev/null
    YAD_STATUS="$?"
    IFS=${old_IFS}
    [[ "$YAD_STATUS" == "1" || "$YAD_STATUS" == "252" ]] && exit 0

    AT_PLUGINS=""
    while read GET_PLUGINS ; do
        DEL_BOOLEAN="$(echo $GET_PLUGINS | awk -F'|' '{print $2}'| awk '{print $1}' )"
        if ! grep "$DEL_BOOLEAN" "$AT_TMP_PATH/skip_plugins" &>/dev/null ; then
            AT_PLUGINS+="$DEL_BOOLEAN "
        fi
    done < "$AT_TMP_PATH/plugins"

    AT_PLUGINS_TO_DEFAULT=""
    while read SKIP_PLUGINS ; do
        PLUGINS_SK="$(basename $SKIP_PLUGINS)"
        if ! grep "$PLUGINS_SK" "${AT_TMP_PATH}/plugins" &>/dev/null ; then
            AT_PLUGINS_TO_DEFAULT+="$PLUGINS_SK "
        fi
    done < "${AT_TMP_PATH}/skip_plugins"

    if [[ "$USE_EPMP" == 1 ]] ; then
        EPMH_CHOOSED_APP=""
        while read CHOOSED_APP ; do
        DEL_BOOLEAN="$(echo $CHOOSED_APP | awk -F'|' '{print $2}'| awk '{print $1}' )"
        grep "$DEL_BOOLEAN" "$AT_TMP_PATH/installed_app" &>/dev/null
        [[ "$?" != 0 ]] && EPMH_CHOOSED_APP+="$DEL_BOOLEAN "
        done < "$AT_TMP_PATH/choosed_app"

        EPMH_REMOVED_APP=""
        while read REMOVED_APP ; do
            DEL_BOOLEAN="$(echo $REMOVED_APP | awk -F'|' '{print $2}'| awk '{print $1}' )"
            EPMH_REMOVED_APP+="$DEL_BOOLEAN "
        done < "$AT_TMP_PATH/removed_app"
    fi

    if [[ -z "$AT_PLUGINS" ]] && [[ -z "$AT_PLUGINS_TO_DEFAULT" ]] \
    && [[ -z "$EPMH_CHOOSED_APP" ]] && [[ -z "$EPMH_REMOVED_APP" ]]
    then
        echo "Nothing to do... Exit."
        exit 0
    fi

    if [[ -n "$AT_PLUGINS" ]] ; then
        for START_AT_FUNCTIONS in $AT_PLUGINS ; do
            . "$(find "$AT_PLUGINS_PATH" -type f -name "$START_AT_FUNCTIONS")"
            at_plugin_function && print_not_used "Applide: $START_AT_FUNCTIONS... OK."
        done
        echo "Done."
    fi

    if [[ -n "$AT_PLUGINS_TO_DEFAULT" ]] ; then
        for RESTART_AT_FUNCTIONS in $AT_PLUGINS_TO_DEFAULT ; do
            . "$(find "$AT_PLUGINS_PATH" -type f -name "$RESTART_AT_FUNCTIONS")"
            at_plugin_restore_to_default && print_in_use "Restore to default: $RESTART_AT_FUNCTIONS... OK."
        done
        echo "Done."
    fi

    [[ -n "$EPMH_CHOOSED_APP" ]] && epmp $EPMH_CHOOSED_APP
    [[ -n "$EPMH_REMOVED_APP" ]] && epmp --remove $EPMH_REMOVED_APP
}

list_plugins () {
    echo -e "\nUse: alt-tune <command>\nOr: alt-tune -r <command> for restore default settings.\n${AT_LINE_SEPARATOR}"
    cat "${AT_TMP_PATH}/list_plugins"
}

cli_alt_tune () {
    if grep -E /"$1"$ "${AT_TMP_PATH}/skip_plugins" ; then
        echo "$1 in used."
    elif grep -E ^"$1 " "${AT_TMP_PATH}/list_plugins" &>/dev/null ; then
        . "$(find "${AT_PLUGINS_PATH}" -type f -name "$1")"
        at_plugin_function && print_not_used "Applide: $1... OK." && exit 0 || exit 1
    else
        print_warn "Unknown command: $1" && exit 1
    fi
}

at_def_restore () {
    if grep -E /"$1"$ "${AT_TMP_PATH}/skip_plugins" ; then
        . "$(find "${AT_PLUGINS_PATH}" -type f -name "$1")"
        at_plugin_restore_to_default && print_in_use "Restore to default: $1... OK." && exit 0 || exit 1
    else
        echo "Nothing to do for: $1."
    fi
}

###MAIN###
check_plugins

case "$1" in
    --list|list|-l|l|--help|help|-h|h) list_plugins ;;
    --default|default|--restore|restore|-r|r) at_def_restore "$2" ;;
    *)
        if [[ -n "$1" ]] ; then
            cli_alt_tune "$1"
        else
            if [[ "$USE_EPMP" == 1 ]] && command -v epmp &>/dev/null
            then check_epm_play_app
            else USE_EPMP=0
            fi
            use_from_gui
        fi ;;
esac

exit 0
